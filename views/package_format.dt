extends layout

block title
	- auto title = "Package file format";

block body
	h2 Introduction

	p Every DUB package <em>should</em> contain a <code>package.json</code> file in its root folder. This file contains meta-information about the project and its dependencies. This information is used for building the project and for deploying it using the registry. The following sections give an overview of the recognized fields and their meaning. Note that any unknown fields are ignored for backwards compatibility reasons.

	p A typical example of a simple application that requires no platform specific setup:

	pre.code
		|{
		|	"name": "myproject",
		|	"description": "A little web service of mine.",
		|	"authors": ["Peter Parker"],
		|	"homepage": "http://myproject.com",
		|	"license": "GPL-2.0",
		|	"dependencies": {
		|		"vibe-d": ">=0.7.11"
		|	}
		|}

	h2 Contents

	nav
		ul
			li
				a(href="#standard-fields") Global Fields
				ul
					li
						a(href="#sub-packages") Sub packages
					li
						a(href="#licenses") License specifications
			li
				a(href="#build-settings") Build settings
				ul
					li
						a(href="#version-specs") Version specifications
					li
						a(href="#target-types") Target types
					li
						a(href="#build-requirements") Build requirements
					li
						a(href="#build-options") Build options
			li
				a(href="#configurations") Configurations
				ul
					li
						a(href="#configuration-fields") Specific fields
			li
				a(href="#build-types") Build types



	h2#standard-fields Global fields

	p In addition to the fields listed here, all <a href="#build-settings">build settings fields</a> are allowed at the global scope.

	table
		tr
			th Name
			th Type
			th Description
		
		tr
			td name [required]
			td
				code string
			td Name of the package, used to uniquely identify the package

		tr
			td description [required for publishing]
			td
				code string
			td Brief description of the package

		tr
			td homepage
			td
				code string
			td URL of the project website

		tr
			td authors
			td
				code string[]
			td List of project authors

		tr
			td copyright
			td
				code string
			td Copyright declaration string

		tr
			td license [required for publishing]
			td
				code string
			td License(s) under which the project can be used - see the <a href="#licenses">license specification</a> section for possible values

		tr
			td subPackages
			td
				code T[]
			td Defines an array of sub-packages defined in the same directory as the root project, where each entry is an object of the same format as a package.json file - see the <a href="#sub-packages">sub package section</a> for more information

		tr
			td configurations
			td
				code T[]
			td Speficies an optional list of build configurations (specified using "--config=...") - see the <a href="#configurations">configurations section</a> for more details

		tr
			td buildTypes
			td
				code T[string]
			td Defines additional custom build types or overrides the default ones (specified using "--build=...") - see the <a href="#build-types">build types section</a> for an example

		tr
			td -ddoxFilterArgs
			td
				code string[]
			td Specifies a list of command line flags usable for controlling filter behavior for --build=ddox <span style="color: red;">[experimental]</span>


	h3#sub-packages Sub packages

	p A package may contain an arbitrary number of additional publicly visible packages. These packages can be defined in the <code>"subPackages"</code> field of the main package.json file. They can be referenced by concatenating their name with the name of the main package using a colon as a delimiter (i.e. <code>"main-package-name:sub-package-name"</code>).

	p The typical use for this feature is to split up a library into a number of parts without breaking it up into different code repositories:

	pre.code
		|{
		|	"name": "mylib",
		|	"targetType": "none",
		|	"dependencies": {
		|		"mylib:component1": "~master",
		|		"mylib:component2": "~master"
		|	},
		|	"subPackages": [
		|		{
		|			"name": "component1",
		|			"targetType": "library",
		|			"sourcePaths": ["source/component1"]
		|		}
		|	]
		|}

	p Note, however, that it is generally recommended to use separate packages, as sub packages have a number of unclean properties, such as mixed import folders.
	

	h3#licenses License specifications

	p The license field should only contain one of the standard license identifiers if possible. At a later point in time, DUB may use this information to validate proper licensing in dependency hierarchies and output warnings when licenses don't match up. Multiple licenses can be separated using the term "or" and for versioned licenses, the postfix "or later" is allowed to also include any later version of the same license.

	p The standard license identifiers are: 
		|<code>public domain</code>, 
		|<code>AFL-3.0</code> (Academic Free License 3.0), 
		|<code>AGPL-3.0</code> (Affero GNU Public License 3.0), 
		|<code>Apache-2.0</code>, 
		|<code>APSL-2.0</code> (Apple Public Source License), 
		|<code>Artistic-2.0</code>, 
		|<code>BSL-1.0</code> (Boost Software License), 
		|<code>BSD 2-clause</code>, 
		|<code>BSD 3-clause</code>, 
		|<code>EPL-1.0</code> (Eclipse Public License),  
		|<code>GPL-2.0</code>, 
		|<code>GPL-3.0</code>, 
		|<code>LGPL-2.1</code>, 
		|<code>LGPL-3.0</code>, 
		|<code>MIT</code>, 
		|<code>MPL-2.0</code> (Mozilla Public License 2.0), 
		|<code>MS-PL</code> (Microsoft Public License), 
		|<code>MS-RL</code> (Microsoft Reciprocal License), 
		|<code>OpenSSL</code> (OpenSSL License), 
		|<code>SSLeay</code> (SSLeay License), 
		|<code>Zlib</code> (zlib/libpng License)

	p Any other value is considered to be a proprietary license, which is assumed to be incompatible with any other license. If you think there is a license that should be included in this list, please file a quick <a href="https://github.com/rejectedsoftware/dub-registry/issues/new">bug report</a>. Please also note that pure D bindings of C/C++ libraries <em>should</em> specify the same license as the original library, although a stricter but compatible license can be used, too.

	p Some example license specifications:
	pre.code
		|"GPL-3.0"
		|"GPL-2.0 or later"
		|"GPL-2.0 or later or proprietary"
		|"GPL-2.0 or LGPL-3.0"
		|"LGPL-2.1 or proprietary"
	
	h2#build-settings Build settings

	p Build settings fields influence the command line options passed to the compiler and linker. All fields are optional.

	p Platform specific settings are supported through the use of field name suffixes. Suffixes are dash separated platform identifiers, as defined in the <a href="http://dlang.org/version.html#PredefinedVersions">D language reference</a>, but converted to lower case. The order of these suffixes is <code>os-architecture-compiler</code>, where any of these parts can be left off. Examples:

	pre.code
		|{
		|	"versions": ["PrintfDebugging"],
		|	"dflags-dmd": ["-vtls"],
		|	"versions-x86_64": ["UseAmd64Impl"]
		|	"libs-posix": ["ssl", "crypto"],
		|	"sourceFiles-windows-x86_64-dmd": ["lib/win32/mylib.lib"],
		|}

	p Inside of build setting values, it is possible to use variables using dollar notation. <code>$PACKAGE_DIR</code> contains the path to the package itself and all other variables are taken from the program environment.

	table
		tr
			th Name
			th Type
			th Description
		
		tr
			td dependencies
			td
				code T[string]
			td List of project dependencies given as pairs of <code>"&lt;name&gt;" : &lt;version-spec&gt;</code> - see <a href="#version-specs">next section</a> for how version specifications look like

		tr
			td targetType
			td
				code string
			td Specifies a specific <a href="#target-types">target type</a> - this field does not support platform suffixes
		
		tr
			td targetName
			td
				code string
			td Sets the base name of the output file; type and platform specific pre- and suffixes are added automatically - this field does not support platform suffixes

		tr
			td targetPath
			td
				code string
			td The destination path of the output binary - this field does not support platform suffixes

		tr
			td workingDirectory
			td
				code string
			td The directory from which the generated executable will be run (defaults to <code>"targetPath"</code>) - this field does not support platform suffixes

		tr
			td subConfigurations
			td
				code string[string]
			td Locks the dependencies to specific configurations; a map from package name to configuration name - this field does not support platform suffixes

		tr
			td buildRequirements
			td
				code string[]
			td List of required settings for the build process. See the <a href="#build-requirements">build requirements section</a> for details.

		tr
			td buildOptions
			td
				code string[]
			td List of build option identifiers (corresponding to compiler flags) - see the <a href="#build-options">build options section</a> for details.

		tr
			td libs
			td
				code string[]
			td A list of external library names - depending on the compiler, these will be converted to the proper linker flag (e.g. "ssl" might get translated to "-L-lssl")

		tr
			td sourceFiles
			td
				code string[]
			td Additional files passed to the compiler - can be useful to add certain configuration dependent source files that are not contained in the general source folder

		tr
			td sourcePaths
			td
				code string[]
			td Allows to customize the path where to look for source files (any folder "source" or "src" is automatically used as a source path if no <code>sourcePaths</code> field is given) - note that you usually also need to define <code>"importPaths"</code> as <code>"sourcePaths"</code> don't influence those

		tr
			td excludedSourceFiles
			td
				code string[]
			td Files that should be removed for the set of already added source files (takes precedence over "sourceFiles" and "sourcePaths") - <a href="http://dlang.org/phobos/std_path.html#.globMatch">Glob matching</a> can be used to pattern match multiple files at once

		tr
			td copyFiles
			td
				code string[]
			td Files that are copied to the applications directory - typically these are DLLs on Windows

		tr
			td versions
			td
				code string[]
			td A list of D versions to be defined during compilation

		tr
			td importPaths
			td
				code string[]
			td Additional import paths to search for D modules (the <code>source/</code> folder is used by default as a source folder, if it exists)

		tr
			td stringImportPaths
			td
				code string[]
			td Additional import paths to search for string imports/views (the <code>views/</code> folder is used by default as a string import folder, if it exists)
		tr
			td preGenerateCommands
			td
				code string[]
			td A list of shell commands that is executed before project generation is started
		tr
			td postGenerateCommands
			td
				code string[]
			td A list of shell commands that is executed after project generation is finished
		tr
			td preBuildCommands
			td
				code string[]
			td A list of shell commands that is executed always before the project is built
		tr
			td postBuildCommands
			td
				code string[]
			td A list of shell commands that is executed always after the project is built

		tr
			td dflags
			td
				code string[]
			td Additional flags passed to the D compiler - note that these flags are usually specific to the compiler in use, but a set of flags is automatically translated from DMD to the selected compiler

		tr
			td lflags
			td
				code string[]
			td Additional flags passed to the linker - note that these flags are usually specific to the linker in use

	p 

	
	h3#version-specs Version specifications
	p A version specification can either be a simple declaration or a more complex variant, alowing more control.

	ul
		li Simple variant:
			p This is the canonical way to specify a dependency. So this is most likely what you want. The format is like this:
			p <code>"&lt;name&gt;" : "&lt;version-string&gt;"</code>
			p Some examples of typical simple version strings:
			ul
				li Require a certain version: <code>"==1.3.0"</code>
				li Require a minimum version: <code>"&gt;=1.3.0"</code>
				li Require a version range: <code>"&gt;=1.3.0 &lt;=1.3.4"</code>
				li Use the GIT master branch: <code>"~master"</code>
			p Numbered versions are formatted and compared according to the <a href="http://semver.org/">SemVer specification</a>.
		li Complex variant:
			p Min. required: <code>"&lt;name&gt;" : { "version": "&lt;version-string&gt;" &lt;, additional-fields&gt;}</code>
			p In addition to the version, additional fields can be added to further control how a dependency is being searched or used:
			ul		
				li <code>"path": "&lt;path-to-package&gt;"</code> - Use a folder to source a package from. 
					p This is only required when the depdend package is not registered with the registry and you don't want to or cannot add the dependent package to your local dub installation. In this case dub cannot resolve this dependency unless you specify the path and it's version of the dependency directly. Another use case is patching to a local library.
				li <code>"optional": true</code> - Indicate an optional dependency.
					p With this specified, the dependency will only be used, if it is installed. <span style="color: red;">[work in progress]</span>.


	h3#target-types Target types

	p The following values are recognized for the <code>"targetType"</code> field:

	table
		tr
			th Value
			th Description
		tr
			td "autodetect"
			td Automatically detects the target type. This is the default global value and causes dub to try and generate "application" and "library" <a href="#configurations">configurations</a>. Use of other values limits the auto-generated configurations to either of the two. This value is not allowed inside of a configuration block.

		tr
			td "none"
			td Does not generate an output file. This is useful for packages that are supposed to drag in other packages using its "dependencies" field.

		tr
			td "executable"</code>
			td Generates an executable binary

		tr
			td "library"</code>
			td Specifies that the package is to be used as a library, without limiting the actual type of library. This should be the default for most libraries.

		tr
			td "sourceLibrary"</code>
			td This target type does not generate a binary, but rather forces dub to add all source files directly to the same compiler invocation as the dependent project.

		tr
			td "staticLibrary"</code>
			td Forces output as a static library container.

		tr
			td "dynamicLibrary"</code>
			td Forces output as a dynamic/shared library.

	h3#build-requirements Build requirements

	p The following values are recognized as array items in the "buildRequirements" field:

	table
		tr
			th Value
			th Description
		tr
			td "allowWarnings"
			td Warnings do not abort compilation
		tr
			td "silenceWarnings"
			td Don't show warnings
		tr
			td "disallowDeprecations"
			td Using deprecated features aborts compilation
		tr
			td "silenceDeprecations"
			td Don't show deprecation warnings
		tr
			td "disallowInlining"
			td Avoid function inlining, even in release builds
		tr
			td "disallowOptimization"
			td Avoid optimizations, even in release builds
		tr
			td "requireBoundsCheck"
			td Always perform bounds checks
		tr
			td "requireContracts"
			td Leave assertions and contracts enabled in release builds
		tr
			td "relaxProperties"
			td Do not enforce strict property handling (removes the -property switch) <span style="color: red;">[deprecated, recent versions of DUB never issue -property]</span>
		tr
			td "noDefaultFlags"
			td Does not emit build type specific flags (e.g. -debug, -cov or -unittest). <span style="color: red;">Note that this flag should never be used for released packages and is indended purely as a development/debugging tool. Using "-build=plain" may also be a more appropriate alternative.</span>

	h3#build-options Build options

	p The "buildOptions" field provides a compiler agnostic way to specify common compiler options/flags. Note that many of these options are implicitly managed by the <a href="#build-requirements">"buildRequirements"</a> field and most others usually only occur in <a href="#custom-build-types">"buildTypes"</a> blocks. It supports the following values:

	table
		tr
			th Value
			th Description
			th Corresponding DMD flag
		tr
			td "debugMode"
			td Compile in debug mode (enables contracts)
			td -debug
		tr
			td "releaseMode"
			td Compile in release mode (disables assertions and bounds checks)
			td -release
		tr
			td "coverage"
			td Enable code coverage analysis
			td -cov
		tr
			td "debugInfo"
			td Enable symbolic debug information
			td -g
		tr
			td "debugInfoC"
			td Enable symbolic debug information in C compatible form
			td -gc
		tr
			td "alwaysStackFrame"
			td Always generate a stack frame
			td -gs
		tr
			td "stackStomping"
			td Perform stack stomping
			td -gx
		tr
			td "inline"
			td Perform function inlining
			td -inline
		tr
			td "noBoundsChecks"
			td Disable all bounds checking
			td -noboundscheck
		tr
			td "optimize"
			td Enable optimizations
			td -O
		tr
			td "profile"
			td Emit profiling code
			td -profile
		tr
			td "unittests"
			td Compile unit tests
			td -unittest
		tr
			td "verbose"
			td Verbose compiler output
			td -v
		tr
			td "ignoreUnknownPragmas"
			td Ignores unknown pragmas during compilation
			td -ignore
		tr
			td "syntaxOnly"
			td Don't generate object files
			td -o-
		tr
			td "warnings"
			td Enable warnings, enabled by default (use "buildRequirements" to control this setting)
			td -wi
		tr
			td "warningsAsErrors"
			td Treat warnings as errors (use "buildRequirements" to control this setting)
			td -w
		tr
			td "ignoreDeprecations"
			td Do not warn about using deprecated features (use "buildRequirements" to control this setting)
			td -d
		tr
			td "deprecationWarnings"
			td Warn about using deprecated features, enabled by default (use "buildRequirements" to control this setting)
			td -dw
		tr
			td "deprecationErrors"
			td Stop compilation upon usage of deprecated features (use "buildRequirements" to control this setting)
			td -de
		tr
			td "property"
			td Enforce property syntax - <span style="color: red;">deprecated</span>
			td -property


	h2#configurations Configurations

	p In addition to platform specific build settings, it is possible to define build configurations. Build configurations add or override build settings to the global ones. To choose a configuration, use <code>dub --config=&lt;name&gt;</code>. By default, the first configuration that matches the target type and build platform is selected automatically. The configurations are defined by adding a "configurations" field.

	p If no configurations are specified, dub automatically tries to detect the two default configurations "application" and "library". The "application" configuration is only added if at least one of the following files is found: <code>source/app.d</code>, <code>source/&lt;package name&gt;.d</code>, <code>src/app.d</code>, <code>src/&lt;package name&gt;.d</code>. Those files are expected to contain only the application entry point (usually <code>main()</code>) and are only added to the "application" configuration.

	p The following example defines "metro-app" and "desktop-app" configurations that are only available on Windows and a "glut-app" configuration that is available on all platforms.

	pre.code
		|{
		|	...
		|	"name": "somepackage"
		|	"configurations": [
		|		{
		|			"name": "metro-app",
		|			"targetType": "executable",
		|			"platforms": ["windows"],
		|			"versions": ["MetroApp"],
		|			"libs": ["d3d11"]
		|		},
		|		{
		|			"name": "desktop-app",
		|			"targetType": "executable",
		|			"platforms": ["windows"],
		|			"versions": ["DesktopApp"],
		|			"libs": ["d3d9"]
		|		},
		|		{
		|			"name": "glut-app",
		|			"targetType": "executable",
		|			"versions": ["GlutApp"]
		|		}
		|	]
		|}

	p You can choose a specific configuration for certain dependencies by using the "subConfigurations" field:

	pre.code
		|{
		|	...
		|	"dependencies": {
		|		"somepackage": ">=1.0.0"
		|	},
		|	"subConfigurations": {
		|		"somepackage": "glut-app"
		|	}
		|}

	p If no configuration is specified for a package, the first one that matches the current platform is chosen (see the "platforms" field below).


	h3#configuration-fields Configuration block specific fields

	p In addition to the usual <a href="#build-settings">build settings</a>, the following fields are recognized inside of a configuration block:

	table
		tr
			th Name
			th Type
			th Description
		
		tr
			td name [required]
			td
				code string
			td Name of the configuration
		tr
			td platforms
			td
				code string[]
			td A list of platform suffixes (as used for the build settings) to limit on which platforms the configuration applies

	h2#build-types Build types

	p By default, a set of predefined build types is already provided by DUB and can be specified using <code>dub build --build=&lt;name&gt;</code>:

	table
		tr
			th Name
			th Build options
		tr
			td plain
			td <code>[]</code>
		tr
			td debug
			td <code>["debugMode", "debugInfo"]</code>
		tr
			td release
			td <code>["releaseMode", "optimize", "inline"]</code>
		tr
			td unittest
			td <code>["unittests", "debugMode", "debugInfo"]</code>
		tr
			td docs
			td <code>["syntaxOnly"]</code>, plus <code>"dflags": ["-c", "-Dddocs"]</code>
		tr
			td ddox
			td <code>["syntaxOnly"]</code>, plus <code>"dflags": ["-c", "-Df__dummy.html", "-Xfdocs.json"]</code>
		tr
			td profile
			td <code>["profile", "optimize", "inline", "debugInfo"]</code>
		tr
			td cov
			td <code>["coverage", "debugInfo"]</code>
		tr
			td unittest-cov
			td <code>["unittests", "coverage", "debugMode", "debugInfo"]</code>

	p The existing build types can be customized and new build types can be added using the global <code>"buildTypes"</code> field. Each entry in <code>"buildTypes"</code> can use any of the <a href="#build-settings">build settings fields</a>. The build settings specified here will later be modified by the package/configuration specific settings.

	p An example that overrides the "debug" build type and defines a new "debug-profile" type:

	pre.code
		|{
		|	"name": "my-package",
		|	"buildTypes": {
		|		"debug": {
		|			"buildOptions": ["debug", "debugInfo", "optimize"]
		|		},
		|		"debug-profile": {
		|			"buildOptions": ["debug", "debugInfo", "profile"]
		|		}
		|	}
		|}
