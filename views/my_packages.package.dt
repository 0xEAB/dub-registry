extends layout

block title
	- auto title = "Edit package " ~ packageName;
	
block body
	- import vibe.data.json;
	- auto pack = registry.getPackageInfo(packageName, true);

	h2 General information

	dl
		dt Package
		dd
			a(href="#{req.rootDir}packages/#{packageName}")= packageName

		- auto latest = pack.versions.length ? pack.versions[pack.versions.length-1] : Json(null);
		dt Latest version
		dd= latest.type == Json.Type.Object ? latest["version"].opt!string : "-"
	
	form(method="POST", action="#{req.rootDir}my_packages/#{packageName}/remove")
		button(type="submit") Remove this package

	- bool update_check_active = registry.isPackageScheduledForUpdate(packageName);
	form(method="POST", action="#{req.rootDir}my_packages/#{packageName}/update")
		p
			button(type="submit", disabled=update_check_active) Trigger manual update
			- if (update_check_active)
				| Package is scheduled for an update check...

	h2 Categories

	p You can choose up to four categories for this package here. Please select only the categories that match most closely. If you feel like there is a category missing, please edit the <a href="https://github.com/rejectedsoftware/dub-registry/blob/master/categories.json">category file</a> and submit a pull request.

	form(method="POST", action="#{req.rootDir}my_packages/#{packageName}/set_categories")
		- foreach (i; 0 .. 4)
			p Category #{i+1}:
				- string selected;
				- if (i < pack.categories.length) selected = pack.categories[i].get!string;
				select(name="category#{i}", id="category#{i}", size="1")
					option(value="")
					- foreach (cat; categories)
						option(value=cat.name, selected=cat.name==selected)= cat.indentedDescription
		button(type="submit") Apply

	- if (pack.errors.length)
		h2 Package errors:
		ul
			- foreach (e; pack.errors)
				li.error= e

	h2 Repository

	- if (auto pe = "updateRepositoryError" in req.params)
		p.error= *pe

	form(method="POST", action="#{req.rootDir}my_packages/#{packageName}/set_repository")
		select(name="kind", size="1")
			option(value="github", selected=pack.repository.kind == "github") GitHub project
			option(value="bitbucket", selected=pack.repository.kind == "bitbucket") Bitbucket project
		p
			label(for="owner") Repository owner:
			input(type="text", name="owner", value=pack.repository.owner.get!string)
		p
			label(for="project") Repository name:
			input(type="text", name="project", value=pack.repository.project.get!string)
		p
			button(type="submit") Apply
