extends layout

block title
	- auto title = "Edit package " ~ packageName;

block body
	- import vibe.data.json;
	- import dubregistry.web : Category;
	- auto pack = registry.getPackageInfo(packageName, true).info;

	h1 Edit package #[a.blind(href="#{req.rootDir}packages/#{packageName}")= packageName]
		- auto latest = pack["versions"].length ? pack["versions"][pack["versions"].length-1] : Json(null);
		- if (latest.type == Json.Type.Object)
			|  #[strong.badge= latest["version"].opt!string]

	- if (pack["errors"].length)
		p.redAlert
			- foreach_reverse(e; pack["errors"])
				|= e.get!string
				br

	h2 General

	.inputForm
		form(method="POST", enctype="multipart/form-data", action="#{req.rootDir}my_packages/#{packageName}/set_logo")
			h3 Logo
			- string logoPath = "/packages/" ~ packageName ~ "/logo";
			img.packageLogo(src=logoPath)
			p.logoError.error
			label
				| Select new Logo (max. 1 MiB, optimal size 512x512)
				input(name="logo", type="file", accept="image/png,image/jpeg,image/gif,image/bmp", onchange="updateLogoPreview(this)")
			button#logo-upload-button(type="submit") Upload
		form(method="POST", enctype="multipart/form-data", action="#{req.rootDir}my_packages/#{packageName}/delete_logo")
			button.danger(type="submit") Delete

	h2 Downloads
	p
		- auto stats = registry.getPackageStats(packageName).downloads;
		| #[strong= stats.daily.to!string] downloads today
			br
		| #[strong= stats.weekly.to!string] downloads this week
			br
		| #[strong= stats.monthly.to!string] downloads this month
			br
		| #[strong= stats.total.to!string] downloads total

	h2 Update
	p Packages are automatically updated, so there is no need to trigger an update manually. Please, be patient.
	- auto update_check_index = registry.getUpdateQueuePosition(packageName);
	- if (update_check_index == 0)
		p Package is currently being updated.
	- else if (update_check_index == 1)
		p Package is scheduled for an update check. Still have to wait for one more package.
	- else if (update_check_index > 1)
		p Package is scheduled for an update check. Still have to wait for #{update_check_index} other packages to complete.
	.inputForm
		form(method="POST", action="#{req.rootDir}my_packages/#{packageName}/update")
			p
				button(type="submit", disabled=(update_check_index >= 0)) Trigger manual update

	h2 Categories

	p You can choose up to four categories for this package here. Please select only the categories that match most closely. If you feel like there is a category missing, please edit the <a href="https://github.com/rejectedsoftware/dub-registry/blob/master/categories.json">category file</a> and submit a pull request.

	.inputForm
		form(method="POST", action="#{req.rootDir}my_packages/#{packageName}/set_categories")
			- foreach (i; 0 .. 4)
				p
					label(for="categories_#{i}") Category #{i+1}:
					- string selected;
					- if (i < pack["categories"].length) selected = pack["categories"][i].get!string;
					select(name="categories_#{i}", id="category#{i}", size="1")
						- void outputCat(Category cat)
							- if (!cat)
								option(value="")
							- else
								option(value=cat.name, selected=cat.name==selected)= cat.indentedDescription
							- if (!cat || cat.subCategories.length)
								- foreach (c; cat ? cat.subCategories : categories)
									- outputCat(c);
						- outputCat(null);
			p
				button(type="submit") Apply

	h2#repository Repository

	- if (error.length)
		- import std.string : splitLines;
		p.redAlert
			- foreach (ln; error.splitLines)
				|= ln
				br

	.inputForm
		form(method="POST", action="#{req.rootDir}my_packages/#{packageName}/set_repository")
			p
				label(for="kind") Repository type
				select(name="kind", size="1")
					- import dubregistry.repositories.repository;
					- auto rkind = pack["repository"]["kind"].get!string;
					- if (supportsRepositoryKind("github"))
						option(value="github", selected=rkind == "github") GitHub 
					- if (supportsRepositoryKind("bitbucket"))
						option(value="bitbucket", selected=rkind == "bitbucket") Bitbucket
					- if (supportsRepositoryKind("gitlab"))
						option(value="gitlab", selected=rkind == "gitlab") GitLab
			p
				label(for="owner") Repository owner:
				input(type="text", name="owner", value=pack["repository"]["owner"].get!string)
			p
				label(for="project") Repository name:
				input(type="text", name="project", value=pack["repository"]["project"].get!string)
			p
				button(type="submit") Apply


	h2 Remove
	p #[strong Warning!] This will remove package from the registry and break all packages that depend on it.
	p
		| If you want to #[strong rename] the project, create a new repository and keep the old one.
			br
		| If you want to #[strong migrate] to a different repository location, use the #[a(href="#repository") form] above.
			br
		| If you want to #[strong transfer] the ownership, please open a ticket on #[a(href="https://github.com/dlang/dub-registry/issues") GitHub].

	.inputForm
		form(method="POST", action="#{req.rootDir}my_packages/#{packageName}/remove")
			button.danger(type="submit") Remove this package

	:javascript
		var logoUploadButton = document.getElementById("logo-upload-button");
		logoUploadButton.disabled = true;
		function updateLogoPreview(input) {
			var f = input.files[0];
			if (!f) return;
			logoUploadButton.disabled = true;
			var error = false;
			document.querySelector(".logoError").textContent = "";
			if (f.type != "image/png" && f.type != "image/gif" && f.type != "image/jpeg" && f.type != "image/bmp")
				document.querySelector(".logoError").textContent += "Warning: Invalid image type. ";
			else if (f.size > 1024 * 1024) {
				document.querySelector(".logoError").textContent += "Error: Image file size too large! ";
				error = true;
			}
			var img = document.querySelector("img.packageLogo");
			img.src = window.URL.createObjectURL(f);
			img.onload = function () {
				if (img.naturalWidth && img.naturalHeight) {
					if (img.naturalWidth < 2 || img.naturalHeight < 2 || img.naturalWidth > 2048 || img.naturalHeight > 2048) {
						document.querySelector(".logoError").textContent += "Invalid image dimenstions, must be between 2x2 and 2048x2048. ";
						error = true;
					}
					if (!error)
						logoUploadButton.disabled = false;
				}
			};
		}
